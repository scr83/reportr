generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  companyName      String?
  primaryColor     String    @default("#3B82F6")
  logo             String?
  plan             Plan      @default(FREE)
  planExpires      DateTime?
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clients          Client[]
  reports          Report[]

  @@map("users")
}

model Client {
  id                           String    @id @default(cuid())
  name                         String
  domain                       String
  contactEmail                 String?
  contactName                  String?
  googleSearchConsoleConnected Boolean   @default(false)
  googleAnalyticsConnected     Boolean   @default(false)
  searchConsolePropertyUrl     String?
  googleAnalyticsPropertyId    String?
  searchConsoleRefreshToken    String?
  analyticsRefreshToken        String?
  lastReportGenerated          DateTime?
  totalReportsGenerated        Int       @default(0)
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  userId                       String
  gaPropertyId                 String?
  googleAccessToken            String?
  googleConnectedAt            DateTime?
  googleRefreshToken           String?
  googleTokenExpiry            DateTime?
  gscSiteUrl                   String?
  user                         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports                      Report[]

  @@index([userId])
  @@index([domain])
  @@map("clients")
}

model Report {
  id                    String       @id @default(cuid())
  title                 String
  status                ReportStatus @default(PENDING)
  data                  Json?
  pdfUrl                String?
  pdfSize               Int?
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?
  errorMessage          String?
  generationTimeMs      Int?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  clientId              String
  userId                String
  client                Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

model ApiUsage {
  id                 String   @id @default(cuid())
  userId             String
  endpoint           String
  method             String
  requestSize        Int?
  responseSize       Int?
  responseTime       Int?
  statusCode         Int
  rateLimitRemaining Int?
  cost               Float    @default(0.0)
  timestamp          DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@map("api_usage")
}

model WebhookEvent {
  id            String        @id @default(cuid())
  eventType     String
  eventData     Json
  status        WebhookStatus @default(PENDING)
  attempts      Int           @default(0)
  maxAttempts   Int           @default(3)
  nextAttemptAt DateTime?
  lastError     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([status])
  @@index([nextAttemptAt])
  @@map("webhook_events")
}

model AppSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_settings")
}

enum Plan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum WebhookStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
