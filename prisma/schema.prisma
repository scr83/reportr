// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model User {
  id           String    @id @default(cuid())
  name         String?
  email        String    @unique
  emailVerified DateTime?
  image        String?
  
  // White-label branding fields
  companyName  String?
  primaryColor String    @default("#3B82F6") // Default blue
  logo         String?
  
  // Subscription/billing fields
  plan         Plan      @default(FREE)
  planExpires  DateTime?
  stripeCustomerId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  clients  Client[]
  reports  Report[]

  @@map("users")
}

model Client {
  id     String @id @default(cuid())
  name   String
  domain String
  
  // Contact information
  contactEmail String?
  contactName  String?
  
  // Google API connections
  googleSearchConsoleConnected Boolean @default(false)
  googleAnalyticsConnected     Boolean @default(false)
  searchConsolePropertyUrl     String?
  googleAnalyticsPropertyId    String?
  
  // API tokens (encrypted)
  searchConsoleRefreshToken String?
  analyticsRefreshToken     String?
  
  // Performance tracking
  lastReportGenerated DateTime?
  totalReportsGenerated Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports Report[]

  @@index([userId])
  @@index([domain])
  @@map("clients")
}

model Report {
  id       String       @id @default(cuid())
  title    String
  status   ReportStatus @default(PENDING)
  
  // Raw report data stored as JSON
  data     Json?
  
  // Generated PDF
  pdfUrl   String?
  pdfSize  Int?
  
  // Processing metadata
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  errorMessage        String?
  
  // Performance metrics
  generationTimeMs    Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  clientId String
  userId   String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

// API Usage Tracking
model ApiUsage {
  id       String   @id @default(cuid())
  userId   String
  endpoint String
  method   String
  
  // Request details
  requestSize  Int?
  responseSize Int?
  responseTime Int?
  statusCode   Int
  
  // Rate limiting
  rateLimitRemaining Int?
  
  // Cost tracking
  cost Float @default(0.0)
  
  timestamp DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
  @@map("api_usage")
}

// Webhook Events
model WebhookEvent {
  id            String           @id @default(cuid())
  eventType     String
  eventData     Json
  status        WebhookStatus    @default(PENDING)
  attempts      Int              @default(0)
  maxAttempts   Int              @default(3)
  nextAttemptAt DateTime?
  lastError     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([nextAttemptAt])
  @@map("webhook_events")
}

// Settings and Configuration
model AppSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       Json
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("app_settings")
}

// Enums
enum Plan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum WebhookStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}