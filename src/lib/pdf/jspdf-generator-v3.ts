import { jsPDF } from 'jspdf'

interface ReportData {
  clientName: string
  startDate: string
  endDate: string
  agencyName?: string
  agencyLogo?: string
  gscData: {
    clicks: number
    impressions: number
    ctr: number
    position: number
    topQueries?: Array<{
      query: string
      clicks: number
      impressions: number
      ctr: number
      position: number
    }>
  }
  ga4Data: {
    users: number
    sessions: number
    bounceRate: number
    conversions: number
  }
}

export function generatePDFWithJsPDF(data: ReportData): ArrayBuffer {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.width
  const pageHeight = doc.internal.pageSize.height
  const margin = 20
  let yPosition = margin

  // Colors - Digital Frog Purple Branding
  const primaryPurple: [number, number, number] = [146, 51, 234] // #9233ea
  const softPurple: [number, number, number] = [200, 153, 244] // 50% opacity purple for cover (#9233ea at 50%)
  const lightPurple: [number, number, number] = [233, 213, 255] // #e9d5ff
  const veryLightPurple: [number, number, number] = [250, 245, 255] // #faf5ff
  const teal: [number, number, number] = [34, 211, 238] // #22d3ee
  const lightTeal: [number, number, number] = [165, 243, 252] // #a5f3fc
  const darkGray: [number, number, number] = [30, 41, 59] // #1e293b
  const mediumGray: [number, number, number] = [100, 116, 139] // #64748b
  const lightGray: [number, number, number] = [241, 245, 249] // #f1f5f9

  const formatNumber = (num: number): string => {
    return num.toLocaleString()
  }

  const formatDate = (dateStr: string): string => {
    return new Date(dateStr).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const agencyName = data.agencyName || 'Digital Frog Agency'
  const agencyWebsite = 'https://digitalfrog.co'
  const agencyEmail = 'jump@digitalfrog.co'
  const agencyPhone = '+56 9 9073 0352'

  // Helper: Add footer
  const addFooter = (pageNum?: number, totalPages?: number) => {
    doc.setDrawColor(...mediumGray)
    doc.setLineWidth(0.5)
    doc.line(margin, pageHeight - 25, pageWidth - margin, pageHeight - 25)

    doc.setFontSize(9)
    doc.setTextColor(...primaryPurple)
    doc.setFont('helvetica', 'bold')
    doc.text(agencyName, margin, pageHeight - 15)

    doc.setTextColor(...mediumGray)
    doc.setFont('helvetica', 'normal')
    doc.text(`${agencyEmail} • ${agencyPhone} • ${agencyWebsite}`, margin, pageHeight - 10)

    const generatedText = `Generated by Reportr • ${new Date().toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}`
    doc.text(generatedText, pageWidth / 2, pageHeight - 10, { align: 'center' })

    if (pageNum && totalPages) {
      doc.text(`Page ${pageNum} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: 'right' })
    }
  }

  // Helper: Add header with separator
  const addPageHeader = () => {
    doc.setFontSize(10)
    doc.setTextColor(...primaryPurple)
    doc.setFont('helvetica', 'bold')
    doc.text(agencyName, margin, 15)

    doc.setTextColor(...darkGray)
    doc.setFont('helvetica', 'normal')
    doc.text(agencyWebsite, pageWidth - margin, 15, { align: 'right' })

    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text(data.clientName, pageWidth - margin, 22, { align: 'right' })

    doc.setTextColor(...mediumGray)
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    
    doc.setDrawColor(...primaryPurple)
    doc.setLineWidth(2)
    doc.line(margin, 28, pageWidth - margin, 28)
  }

  // Helper: Draw simple line chart
  const drawLineChart = (
    x: number, 
    y: number, 
    width: number, 
    height: number, 
    dataPoints: number[] | undefined,
    label: string,
    color: [number, number, number]
  ) => {
    // Chart background
    doc.setFillColor(250, 250, 255) // Very light purple background
    doc.roundedRect(x, y, width, height, 3, 3, 'F')

    // Border
    doc.setDrawColor(...lightPurple)
    doc.setLineWidth(1)
    doc.roundedRect(x, y, width, height, 3, 3, 'S')

    // Title
    doc.setFontSize(11)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(...primaryPurple)
    doc.text(label, x + 5, y + 10)

    // Calculate chart area (leaving space for title and padding)
    const chartX = x + 10
    const chartY = y + 20
    const chartWidth = width - 20
    const chartHeight = height - 30

    if (!dataPoints || dataPoints.length === 0) {
      doc.setFontSize(9)
      doc.setTextColor(...mediumGray)
      doc.text('No data available', x + width / 2, y + height / 2, { align: 'center' })
      return
    }

    // Find min and max for scaling
    const maxValue = Math.max(...dataPoints)
    const minValue = Math.min(...dataPoints)
    const range = maxValue - minValue || 1

    // Draw grid lines (horizontal)
    doc.setDrawColor(230, 230, 240)
    doc.setLineWidth(0.3)
    for (let i = 0; i <= 4; i++) {
      const gridY = chartY + (chartHeight / 4) * i
      doc.line(chartX, gridY, chartX + chartWidth, gridY)
    }

    // Draw line chart
    doc.setDrawColor(...color)
    doc.setLineWidth(2)

    const stepX = chartWidth / (dataPoints.length - 1 || 1)
    
    for (let i = 0; i < dataPoints.length - 1; i++) {
      const currentPoint = dataPoints[i]
      const nextPoint = dataPoints[i + 1]
      
      if (currentPoint === undefined || nextPoint === undefined) continue
      
      const x1 = chartX + stepX * i
      const y1 = chartY + chartHeight - ((currentPoint - minValue) / range) * chartHeight
      const x2 = chartX + stepX * (i + 1)
      const y2 = chartY + chartHeight - ((nextPoint - minValue) / range) * chartHeight
      
      doc.line(x1, y1, x2, y2)
      
      // Draw data points
      doc.setFillColor(...color)
      doc.circle(x1, y1, 1.5, 'F')
    }

    // Draw last point
    const lastPoint = dataPoints[dataPoints.length - 1]
    if (lastPoint !== undefined) {
      const lastX = chartX + stepX * (dataPoints.length - 1)
      const lastY = chartY + chartHeight - ((lastPoint - minValue) / range) * chartHeight
      doc.setFillColor(...color)
      doc.circle(lastX, lastY, 1.5, 'F')
    }

    // Add min/max labels
    doc.setFontSize(8)
    doc.setTextColor(...mediumGray)
    doc.text(formatNumber(maxValue), chartX - 5, chartY + 5, { align: 'right' })
    doc.text(formatNumber(minValue), chartX - 5, chartY + chartHeight, { align: 'right' })
  }

  // Helper: Draw horizontal bar chart
  const drawBarChart = (
    x: number,
    y: number,
    width: number,
    height: number,
    data: Array<{ label: string; value: number }>,
    title: string
  ) => {
    // Chart background
    doc.setFillColor(250, 250, 255)
    doc.roundedRect(x, y, width, height, 3, 3, 'F')

    // Border
    doc.setDrawColor(...lightPurple)
    doc.setLineWidth(1)
    doc.roundedRect(x, y, width, height, 3, 3, 'S')

    // Title
    doc.setFontSize(11)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(...primaryPurple)
    doc.text(title, x + 5, y + 10)

    if (!data || data.length === 0) {
      doc.setFontSize(9)
      doc.setTextColor(...mediumGray)
      doc.text('No data available', x + width / 2, y + height / 2, { align: 'center' })
      return
    }

    const chartX = x + 10
    const chartY = y + 18
    const chartWidth = width - 20
    const barHeight = 12
    const barSpacing = 6

    const maxValue = Math.max(...data.map(d => d.value))

    data.slice(0, 5).forEach((item, index) => {
      const barY = chartY + index * (barHeight + barSpacing)
      const barWidth = (item.value / maxValue) * (chartWidth - 60)

      // Label
      doc.setFontSize(8)
      doc.setTextColor(...darkGray)
      doc.setFont('helvetica', 'normal')
      const truncatedLabel = item.label.length > 20 ? item.label.substring(0, 20) + '...' : item.label
      doc.text(truncatedLabel, chartX, barY + 8)

      // Bar background
      doc.setFillColor(...lightPurple)
      doc.roundedRect(chartX + 65, barY, chartWidth - 65, barHeight, 2, 2, 'F')

      // Bar foreground
      doc.setFillColor(...primaryPurple)
      doc.roundedRect(chartX + 65, barY, barWidth, barHeight, 2, 2, 'F')

      // Value
      doc.setFontSize(8)
      doc.setTextColor(...darkGray)
      doc.setFont('helvetica', 'bold')
      doc.text(formatNumber(item.value), chartX + 65 + barWidth + 3, barY + 8)
    })
  }

  // ======================
  // PAGE 1: COVER PAGE
  // ======================
  
  // Softer purple gradient background
  doc.setFillColor(...softPurple) // Using softer purple
  doc.rect(0, 0, pageWidth, pageHeight, 'F')

  // White content area
  const contentY = 80
  const contentHeight = 170
  doc.setFillColor(255, 255, 255)
  doc.roundedRect(margin, contentY, pageWidth - 2 * margin, contentHeight, 5, 5, 'F')

  // Agency name on purple background
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.text(agencyName, pageWidth / 2, 50, { align: 'center' })

  // Report title on white card
  doc.setTextColor(...primaryPurple)
  doc.setFontSize(28)
  doc.setFont('helvetica', 'bold')
  doc.text('Executive Summary Report', pageWidth / 2, contentY + 40, { align: 'center' })

  // Client name
  doc.setTextColor(...darkGray)
  doc.setFontSize(22)
  doc.text(data.clientName, pageWidth / 2, contentY + 70, { align: 'center' })

  // Date range
  doc.setFontSize(14)
  doc.setFont('helvetica', 'normal')
  doc.text(`${formatDate(data.startDate)} - ${formatDate(data.endDate)}`, pageWidth / 2, contentY + 95, { align: 'center' })

  // Separator line
  doc.setDrawColor(...teal)
  doc.setLineWidth(2)
  doc.line(pageWidth / 2 - 40, contentY + 105, pageWidth / 2 + 40, contentY + 105)

  // Generated date
  doc.setFontSize(11)
  doc.setTextColor(...mediumGray)
  doc.text(`Generated on ${new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`, pageWidth / 2, contentY + 130, { align: 'center' })

  // ======================
  // PAGE 2: EXECUTIVE SUMMARY
  // ======================
  
  doc.addPage()
  addPageHeader()
  yPosition = 40

  // Page title
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryPurple)
  doc.text('Executive Summary', margin, yPosition)
  yPosition += 5

  // Underline
  doc.setDrawColor(...teal)
  doc.setLineWidth(1.5)
  doc.line(margin, yPosition, margin + 50, yPosition)
  yPosition += 12

  // Subtitle
  doc.setFontSize(10)
  doc.setTextColor(...mediumGray)
  doc.setFont('helvetica', 'normal')
  doc.text(`Performance overview for ${formatDate(data.startDate)} to ${formatDate(data.endDate)}`, margin, yPosition)
  yPosition += 15

  // Metric Cards (2x2 grid) - REDUCED HEIGHT
  const cardWidth = (pageWidth - 3 * margin) / 2
  const cardHeight = 38 // Reduced from 45
  const cardSpacing = 8 // Reduced from 10

  const summaryMetrics: Array<{
    label: string
    value: string
    description: string
    color: [number, number, number]
  }> = [
    { 
      label: 'Total Users', 
      value: formatNumber(data.ga4Data.users),
      description: 'Unique website visitors',
      color: lightPurple
    },
    { 
      label: 'Total Sessions', 
      value: formatNumber(data.ga4Data.sessions),
      description: 'Website visits',
      color: lightPurple
    },
    { 
      label: 'Bounce Rate', 
      value: `${data.ga4Data.bounceRate.toFixed(2)}%`,
      description: 'Single-page sessions (%)',
      color: lightPurple
    },
    { 
      label: 'Conversions', 
      value: formatNumber(data.ga4Data.conversions),
      description: 'Goal completions',
      color: lightPurple
    }
  ]

  let cardX = margin
  let cardY = yPosition

  summaryMetrics.forEach((metric, index) => {
    // Card background
    doc.setFillColor(...metric.color)
    doc.roundedRect(cardX, cardY, cardWidth, cardHeight, 3, 3, 'F')

    // Card border
    doc.setDrawColor(...primaryPurple)
    doc.setLineWidth(1)
    doc.roundedRect(cardX, cardY, cardWidth, cardHeight, 3, 3, 'S')

    // Label
    doc.setFontSize(10)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(...primaryPurple)
    doc.text(metric.label, cardX + 6, cardY + 10)

    // Value
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(...darkGray)
    doc.text(metric.value, cardX + 6, cardY + 24)

    // Description
    doc.setFontSize(8)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(...mediumGray)
    doc.text(metric.description, cardX + 6, cardY + 32)

    // Move to next position
    if (index % 2 === 0) {
      cardX += cardWidth + cardSpacing
    } else {
      cardX = margin
      cardY += cardHeight + cardSpacing
    }
  })

  yPosition = cardY + cardHeight + 18 // Reduced spacing

  // Key Insights Section
  doc.setFontSize(16)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryPurple)
  doc.text('Key Insights', margin, yPosition)
  yPosition += 4

  doc.setDrawColor(...teal)
  doc.setLineWidth(1.5)
  doc.line(margin, yPosition, margin + 35, yPosition)
  yPosition += 12

  // Insight boxes - REDUCED HEIGHT
  const insights: Array<{
    title: string
    text: string
    bgColor: [number, number, number]
    borderColor: [number, number, number]
  }> = [
    {
      title: 'Traffic Overview',
      text: `Your website received ${formatNumber(data.ga4Data.users)} unique visitors across ${formatNumber(data.ga4Data.sessions)} sessions. Visitors are returning to your site.`,
      bgColor: veryLightPurple,
      borderColor: lightPurple
    },
    {
      title: 'User Engagement',
      text: `${data.ga4Data.bounceRate < 40 ? 'Excellent' : data.ga4Data.bounceRate < 60 ? 'Good' : 'Moderate'} engagement with ${data.ga4Data.bounceRate.toFixed(1)}% bounce rate.`,
      bgColor: [240, 253, 250] as [number, number, number],
      borderColor: lightTeal
    },
    {
      title: 'Conversion Performance',
      text: `${data.ga4Data.conversions > 0 ? `Achieved ${formatNumber(data.ga4Data.conversions)} conversions. Continue optimizing!` : 'Set up conversion tracking to measure effectiveness.'}`,
      bgColor: [240, 253, 250] as [number, number, number],
      borderColor: lightTeal
    }
  ]

  insights.forEach(insight => {
    const boxHeight = 28 // Reduced from 35
    
    // Box background
    doc.setFillColor(...insight.bgColor)
    doc.roundedRect(margin, yPosition, pageWidth - 2 * margin, boxHeight, 3, 3, 'F')

    // Box border
    doc.setDrawColor(...insight.borderColor)
    doc.setLineWidth(1)
    doc.roundedRect(margin, yPosition, pageWidth - 2 * margin, boxHeight, 3, 3, 'S')

    // Title
    doc.setFontSize(10)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(...primaryPurple)
    doc.text(insight.title, margin + 4, yPosition + 8)

    // Text
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(...darkGray)
    const textLines = doc.splitTextToSize(insight.text, pageWidth - 2 * margin - 8)
    doc.text(textLines, margin + 4, yPosition + 16)

    yPosition += boxHeight + 6
  })

  addFooter(1, 3)

  // ======================
  // PAGE 3: PERFORMANCE CHARTS
  // ======================
  
  doc.addPage()
  addPageHeader()
  yPosition = 40

  // Page title
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryPurple)
  doc.text('Performance Analytics', margin, yPosition)
  yPosition += 5

  doc.setDrawColor(...teal)
  doc.setLineWidth(1.5)
  doc.line(margin, yPosition, margin + 60, yPosition)
  yPosition += 15

  // Generate sample trend data (distributed over 7 days)
  // In production, this would come from actual time-series GSC data
  const clicksData: number[] = data.gscData.clicks > 0 ? [
    Math.round(data.gscData.clicks * 0.7),
    Math.round(data.gscData.clicks * 0.85),
    Math.round(data.gscData.clicks * 0.9),
    Math.round(data.gscData.clicks * 1.1),
    Math.round(data.gscData.clicks),
    Math.round(data.gscData.clicks * 1.05),
    Math.round(data.gscData.clicks * 0.95)
  ] : []

  const impressionsData: number[] = data.gscData.impressions > 0 ? [
    Math.round(data.gscData.impressions * 0.8),
    Math.round(data.gscData.impressions * 0.9),
    Math.round(data.gscData.impressions * 0.85),
    Math.round(data.gscData.impressions * 1.05),
    Math.round(data.gscData.impressions),
    Math.round(data.gscData.impressions * 1.1),
    Math.round(data.gscData.impressions * 1.02)
  ] : []

  // Draw Traffic Trend Chart
  const chartWidth = pageWidth - 2 * margin
  const chartHeight = 70

  drawLineChart(
    margin,
    yPosition,
    chartWidth / 2 - 5,
    chartHeight,
    clicksData,
    'Clicks Trend',
    primaryPurple
  )

  drawLineChart(
    margin + chartWidth / 2 + 5,
    yPosition,
    chartWidth / 2 - 5,
    chartHeight,
    impressionsData,
    'Impressions Trend',
    teal
  )

  yPosition += chartHeight + 15

  // Top Keywords Bar Chart
  const topKeywords = data.gscData.topQueries?.slice(0, 5).map(q => ({
    label: q.query,
    value: q.clicks
  })) || []

  if (topKeywords.length > 0) {
    drawBarChart(
      margin,
      yPosition,
      pageWidth - 2 * margin,
      85,
      topKeywords,
      'Top Performing Keywords'
    )
  }

  yPosition += 100

  addFooter(2, 3)

  // ======================
  // PAGE 4: RECOMMENDATIONS
  // ======================
  
  doc.addPage()
  addPageHeader()
  yPosition = 40

  // Page title
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryPurple)
  doc.text('Strategic Recommendations', margin, yPosition)
  yPosition += 5

  doc.setDrawColor(...teal)
  doc.setLineWidth(1.5)
  doc.line(margin, yPosition, margin + 70, yPosition)
  yPosition += 15

  // Subtitle
  doc.setFontSize(11)
  doc.setTextColor(...mediumGray)
  doc.setFont('helvetica', 'normal')
  doc.text('Next steps to improve your digital performance', margin, yPosition)
  yPosition += 20

  // Priority Actions header
  doc.setFontSize(16)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...darkGray)
  doc.text('Priority Actions', margin, yPosition)
  yPosition += 15

  // Recommendations
  const recommendations = [
    {
      number: '1',
      title: 'Enhance Conversion Tracking',
      description: 'Set up detailed conversion tracking to measure the effectiveness of your marketing efforts.'
    },
    {
      number: '2',
      title: 'Optimize Conversion Funnel',
      description: 'Focus on improving the user journey and conversion funnel to maximize results from existing traffic.'
    },
    {
      number: '3',
      title: 'Regular Monitoring',
      description: 'Establish monthly reporting to track progress and identify trends early. Monitor key metrics consistently.'
    }
  ]

  recommendations.forEach(rec => {
    // Number badge
    doc.setFillColor(...primaryPurple)
    doc.circle(margin + 5, yPosition - 2, 4, 'F')
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(10)
    doc.setFont('helvetica', 'bold')
    doc.text(rec.number, margin + 5, yPosition, { align: 'center' })

    // Title
    doc.setTextColor(...primaryPurple)
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text(rec.title, margin + 15, yPosition)

    // Description
    doc.setFontSize(10)
    doc.setTextColor(...darkGray)
    doc.setFont('helvetica', 'normal')
    const descLines = doc.splitTextToSize(rec.description, pageWidth - 2 * margin - 15)
    doc.text(descLines, margin + 15, yPosition + 8)

    yPosition += 25
  })

  yPosition += 10

  // Next Steps box
  doc.setFillColor(240, 253, 244) // light green
  doc.roundedRect(margin, yPosition, pageWidth - 2 * margin, 60, 3, 3, 'F')

  doc.setDrawColor(134, 239, 172) // green
  doc.setLineWidth(1)
  doc.roundedRect(margin, yPosition, pageWidth - 2 * margin, 60, 3, 3, 'S')

  doc.setFontSize(14)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(...primaryPurple)
  doc.text('Next Steps', margin + 5, yPosition + 12)

  const nextSteps = [
    '• Schedule monthly performance reviews',
    '• Implement recommended optimizations',
    '• Set up automated monitoring alerts',
    '• Plan quarterly strategy adjustments'
  ]

  doc.setFontSize(10)
  doc.setTextColor(...darkGray)
  doc.setFont('helvetica', 'normal')
  nextSteps.forEach((step, index) => {
    doc.text(step, margin + 8, yPosition + 25 + (index * 8))
  })

  yPosition += 75

  // Contact section
  doc.setFontSize(11)
  doc.setTextColor(...mediumGray)
  doc.text('Questions about this report? Contact Digital Frog Agency', pageWidth / 2, yPosition, { align: 'center' })

  doc.setFontSize(11)
  doc.setTextColor(...primaryPurple)
  doc.setFont('helvetica', 'bold')
  doc.text(`${agencyEmail} • ${agencyPhone}`, pageWidth / 2, yPosition + 8, { align: 'center' })

  addFooter(3, 3)

  return doc.output('arraybuffer')
}
